package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_about_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xe5\xb2\x81\xd2\x0a\x40\x60\x93\x91\x9a\x98\x02\x65\x83\xf9\xb9\xa9\x25\x89\x0a\xc9\x19\x89\x45\xc5\xa9\x25\xb6\x4a\xa5\x25\x69\xba\x16\x4a\x0a\xfa\xc8\x2a\x4a\x32\x4b\x72\x52\xed\x1c\x93\xf2\x4b\x4b\x6c\xf4\x21\x1c\xa8\x59\xfa\x48\x86\xd9\x24\xe5\xa7\x54\x02\xd9\x08\x8d\x30\x45\x50\x09\xa0\x6a\x88\x33\x00\x01\x00\x00\xff\xff\xed\xad\xee\xb2\xa0\x00\x00\x00")

func templates_about_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_about_tmpl,
		"templates/about.tmpl",
	)
}

func templates_about_tmpl() (*asset, error) {
	bytes, err := templates_about_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/about.tmpl", size: 160, mode: os.FileMode(484), modTime: time.Unix(1423620500, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_dirlist_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdb\x6e\xe3\x36\x10\x7d\xcf\x57\x4c\xd9\xc5\xc2\x46\x23\x29\x5b\xa0\x40\xe1\xb5\xdc\x87\xbd\x00\x45\x77\xb1\x05\xda\x87\xf6\x91\x26\x69\x8b\x09\x4d\x2a\xe4\xd8\xa9\x2b\xe8\xdf\x3b\xd4\xc5\x96\x64\x67\x2f\x40\x05\x04\x1e\x0e\x67\x0e\x0f\xcf\x8c\x34\x59\x7e\xf7\xf6\xd3\x9b\x3f\xff\xfe\xfd\x1d\x14\xb8\x33\xab\x9b\x65\xfb\x03\xb0\x2c\x14\x97\xd1\x20\x73\xa7\x90\x83\x28\xb8\x0f\x0a\x73\xb6\xc7\x4d\xf2\x33\x83\x6c\xb8\x69\xf9\x4e\xe5\xec\xa0\xd5\x53\xe9\x3c\x32\x10\xce\xa2\xb2\x14\xfc\xa4\x25\x16\xb9\x54\x07\x2d\x54\xd2\x2c\x6e\x41\x5b\x8d\x9a\x9b\x24\x08\x6e\x54\xfe\x2a\xbd\x3b\x83\x05\xe1\x75\x89\x10\xbc\xc8\x59\x76\x1f\xb2\xfb\xc7\xbd\xf2\xc7\x74\xa7\x6d\x7a\x1f\xd8\x6a\x99\xb5\x01\x9f\x8d\x4e\xf6\xfa\x6b\x13\xd6\xce\x61\x40\xcf\xcb\xe7\x12\x8c\xb6\x0f\x50\x78\xb5\xa1\x78\x11\xa6\x09\xe4\x61\xe0\x95\xc9\x59\xc0\xa3\x51\xa1\x50\x0a\xd9\x33\x99\x63\x6e\xdf\x92\x29\xb5\x37\x3a\xe0\x67\x73\x50\xa3\x51\xab\xb7\xda\x2b\x81\xce\x1f\xe1\x03\x25\x68\xbb\x5d\x40\x55\xa5\x94\x5f\xd7\xcb\xac\x0d\x89\x95\xcd\xfa\xd2\x2e\xd7\x4e\x1e\x3b\x04\xa9\x0f\x20\x0c\x0f\x21\x67\xb1\x78\x5c\x5b\xe5\x3b\xf4\x88\xcf\xd7\x46\x81\x50\xc6\x84\x92\x0b\x42\xce\xef\xfa\xe8\x66\xeb\x14\x19\x1b\xe7\xc7\x09\x91\x05\x0c\x68\xd0\xee\x39\x14\xcf\x4d\x76\xf2\xac\xde\x6b\xa3\x88\x6e\x31\xf5\xff\xa1\xff\xbd\xea\xff\x40\x7a\x5d\xf5\xf3\x80\xf0\xd1\x49\xbd\xd1\x4a\x8e\x03\xe2\x6a\x74\x72\x55\x79\x6e\xb7\x0a\xd2\x0d\x1d\x1e\xea\x7a\x40\xd1\x8f\x71\x65\x7f\xef\xd8\xf2\x6c\xb8\x17\x51\xf4\x06\x2c\xa1\x04\xa2\x0a\x2c\x61\x03\xa0\xf6\x99\x2c\x97\xbc\x2b\x34\xe9\x13\x8d\xba\x66\x2b\x32\x23\x74\xd4\x8a\x4f\xe1\x95\x09\xea\x02\xf3\x1a\xc8\x24\x24\xb6\x7e\xc9\x6d\x4f\x7d\x6b\x8e\x65\xa1\xa9\xcc\x70\xb2\x92\x8d\x33\x52\xf9\xc4\x95\xca\x36\x6f\x01\x85\xaf\xa6\x74\x23\x0c\x7a\x67\xb7\x43\x92\x9d\x67\x4a\xea\x0a\x79\x2b\x47\xdc\xa9\x08\x93\xda\x4b\xc2\xed\xc4\x6b\x3a\xf6\x62\xfb\x9b\xd4\xfe\x7f\x74\x91\xee\xc9\x1a\xc7\x65\xc2\x0d\x9e\x84\xf9\xd2\x65\x01\x5e\xda\x75\x28\x5f\x4f\xe3\xbe\x74\xd8\xa3\x17\x4e\x2a\x06\x92\x23\xcf\x59\x81\x58\x2e\xb2\x2c\xd2\x77\x01\xeb\x3a\x6b\x9a\x33\xae\x4b\x8e\x45\xbc\xce\x35\x3a\x5f\x25\x74\x4f\x62\x87\x3a\x76\x71\x94\xbd\x31\x2f\x74\xa7\x95\x1f\xbe\x26\x43\x6c\xda\x8b\xef\xfe\xea\xa6\x5f\x0f\x3f\x9d\xf1\x79\x31\xdb\xec\xad\x40\xed\xec\x6c\x5e\x0d\x08\xbc\x98\xb1\xc8\x3b\xbd\xb8\xf8\x3c\x15\x46\x8b\x87\x67\xd2\x00\x0e\xdc\xc3\xde\x1b\xc8\x09\x02\x0b\x1d\xe6\x29\x47\xf4\x33\x16\xf5\x62\xf3\xb1\xdc\x74\xc8\xf7\x7a\xb7\x3d\x43\xb7\xa1\xf4\xed\x67\xb7\xd0\x6b\x1b\x87\x1a\xa6\x5b\xe7\xb6\x46\xf1\x52\x87\x54\xb8\x5d\xeb\xfc\x45\x14\x21\x7f\xf5\xd3\xdd\x3f\xf4\xf7\x52\x14\x98\x3f\x7a\xfa\xa1\x8f\xef\x0f\x44\xe0\xca\x51\x92\x26\x9a\xdb\xd2\x31\xad\x31\xab\x26\xb5\x6f\xdd\x6f\xa2\xec\x0b\x60\xd6\x25\xc2\xb8\xa0\x88\x4a\x96\xc1\xfb\x5f\xff\xfa\xf8\x6e\x01\xd6\x21\x3c\x39\xff\x40\x9f\xd7\x49\x32\xc5\xac\xf7\x88\xce\x52\xee\x14\x98\xf6\xe2\xf3\xe9\xb7\x05\x9c\x65\x83\xaa\x17\xa8\xa3\xc3\xda\xe3\xe6\xaf\xa7\x5f\x8f\x98\x5e\xdf\x8e\x9c\xf5\xe8\x7a\xf5\xfc\xe6\xc2\x3c\x4f\xc9\xde\x11\xc7\x87\x96\x39\xeb\x64\x80\x66\xda\xe4\xac\x6f\xe8\x66\x62\xc5\xdd\x50\x1a\x7e\x8c\x57\xb5\xa3\x99\x41\x85\x6a\xd2\x07\x05\x6b\xa7\x34\xcb\x4e\x33\x88\x06\xe1\xe1\x74\x60\x55\xa1\xda\x11\x16\xd2\x9b\xbf\xa1\xa1\x4c\xc3\x0a\xd2\xae\x33\xbb\xc8\x68\xb4\x03\x8e\xa6\x4e\xfc\xaf\xe6\xbf\x00\x00\x00\xff\xff\x97\x8a\xe6\x6b\xec\x08\x00\x00")

func templates_dirlist_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_dirlist_tmpl,
		"templates/dirlist.tmpl",
	)
}

func templates_dirlist_tmpl() (*asset, error) {
	bytes, err := templates_dirlist_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/dirlist.tmpl", size: 2284, mode: os.FileMode(484), modTime: time.Unix(1423631943, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_error_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\xf7\x4a\x7d\x87\x23\x33\xa9\xa1\x13\x42\x4e\x16\xda\x0d\x09\x06\x16\x46\x63\x1f\xf8\x24\xc7\x46\x97\x23\x55\x55\xf9\xdd\x71\x82\x83\x60\xf2\x6f\x7f\xe7\x4f\xbf\x4e\x5f\x1d\x9e\x1e\x5e\x5e\x9f\x8f\xe0\x65\x08\xfd\x76\xa3\xeb\x09\xa0\x3d\x1a\xb7\xa4\x92\x07\x14\x03\xd6\x1b\x1e\x51\xba\xe6\x4b\xde\xdb\xbb\x06\xd4\x3f\x1a\xcd\x80\x5d\x33\x11\x9e\x3e\x13\x4b\x03\x36\x45\xc1\x58\xa6\x4f\xe4\xc4\x77\x0e\x27\xb2\xd8\x2e\x97\x6b\xa0\x48\x42\x26\xb4\xa3\x35\x01\xbb\xdb\xdd\xcd\x1f\x9b\x90\x04\xec\x0f\xc4\x68\x25\xf1\x19\x1e\x69\x14\x8a\x1f\xf7\x70\xb9\xec\x1c\x71\xce\x5a\xfd\x8c\x6c\x37\x4b\x4f\xf5\x5b\x54\xbf\x25\x77\x5e\x35\x7e\xdf\x1f\x99\x13\x17\xbe\x5f\xdf\x1c\x4d\x35\xc2\x6c\xc3\x99\xe7\x5c\xa1\x5a\xa9\x56\xd5\x53\xbe\xce\xdb\xf8\x0e\x00\x00\xff\xff\x6b\x6a\x15\xbc\x25\x01\x00\x00")

func templates_error_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_error_tmpl,
		"templates/error.tmpl",
	)
}

func templates_error_tmpl() (*asset, error) {
	bytes, err := templates_error_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/error.tmpl", size: 293, mode: os.FileMode(484), modTime: time.Unix(1423621257, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_footer_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x4d\xca\x84\x30\x0c\x40\xf7\x82\x77\x28\x59\xab\xd9\x7f\xd4\x5e\xe5\xa3\xb6\xb1\x0d\x53\xad\xb4\xd5\x19\x6f\x3f\x95\x81\xf9\xc9\x22\xf0\x20\xef\x41\xa4\xe5\x43\xb0\x1d\x61\x8e\xb1\x50\x02\x61\x82\xce\x79\x84\x6d\x0f\xa1\x4f\xec\x7c\x01\xd5\x36\xa2\x8e\xd4\xc2\x27\x9a\x47\xf0\xa5\x6c\xf9\x0f\xd1\x71\xf1\xfb\x34\x98\xb8\xa0\x89\x96\xf2\xed\x9c\xc2\x4e\x38\x73\xa0\x3e\x53\x3a\x6a\x4d\x7d\x81\x44\xad\xba\x57\xea\x9e\xb8\x90\x98\xce\xdf\x66\x4d\x66\x4f\xab\x7b\xb0\x5e\xdd\xb0\x10\xa8\x0f\x5e\xb2\xe0\x55\xb8\x18\x2a\x75\x6f\x0f\xff\x2d\xda\x68\x40\xd5\x75\xdd\xb4\x8d\xc4\xfa\x91\x7a\x06\x00\x00\xff\xff\x5e\x16\x70\x6d\xd7\x00\x00\x00")

func templates_footer_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_footer_tmpl,
		"templates/footer.tmpl",
	)
}

func templates_footer_tmpl() (*asset, error) {
	bytes, err := templates_footer_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/footer.tmpl", size: 215, mode: os.FileMode(484), modTime: time.Unix(1423622101, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_help_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x55\x51\x6f\xa3\x46\x10\x7e\xb6\x7f\xc5\x94\x7b\xb9\x93\x82\x31\x77\x71\x65\x61\x8c\x2a\x5d\x52\xf5\x2d\x51\x1a\xb5\xea\x53\xb5\xde\x1d\x60\xd5\x65\x17\x2d\xeb\xd8\xae\x95\xff\xde\x59\x30\x18\xdc\x1c\x0f\x66\x60\xbe\xf9\xf6\x9b\x19\x66\x9c\xfe\xf4\xf0\xf4\xfd\xf5\xaf\xe7\x47\x28\x5d\xa5\xb2\x79\xda\xdd\x66\x69\x89\x4c\x64\x73\xb8\x5c\x69\x85\x8e\x01\x2f\x99\x6d\xd0\x6d\x83\xbd\xcb\xc3\x75\x00\x11\x01\x67\xa9\x93\x4e\x61\xf6\x1b\xaa\x3a\x8d\x3a\x9b\xc2\xa3\x2e\x7e\x96\xee\x8c\x38\x75\x3c\x1f\x72\x8c\x5d\x9a\x55\xb8\x0d\xde\x24\x1e\x6a\x63\x5d\x00\xdc\x68\x87\x9a\xa0\x07\x29\x5c\xb9\x15\xf8\x26\x39\x86\xed\xc3\x1d\x48\x2d\x9d\x64\x2a\x6c\x38\x53\xb8\x8d\x17\xcb\x56\x4e\x4b\x76\x11\xf4\xfa\xfa\x0c\x07\xe6\x78\x89\x16\x1e\x0c\xdf\x57\xc4\xc5\x9c\x34\x7a\x90\xd9\xa2\x1b\x77\xea\x6d\x00\xaf\x16\xce\xd0\x9e\x91\xc0\x7a\xb9\xac\x8f\x1b\xa8\x98\x2d\xa4\x4e\x60\x09\x6c\xef\xcc\x06\xde\xe7\x33\x8f\xfd\xa5\x42\x21\x19\x7c\xae\xd8\x31\xbc\x04\xc4\x4b\x1f\xf1\x05\xce\x43\xe1\xa6\x84\x5d\x7c\xcd\x84\x90\xba\xf0\x84\xf7\x9e\xff\xfd\x82\xee\xef\x8b\x0a\x9b\x82\x82\x76\x8c\xff\x53\x58\xb3\xd7\x22\x81\x4f\x79\x9e\xc7\x6c\x3d\x0a\xfe\xb9\x3e\xc2\x57\x1f\x9e\x53\x99\x12\x3a\x48\x09\x88\x57\xf4\xb2\x32\xda\x34\x35\xe3\x78\x65\x5e\x68\xe3\x70\x50\x45\xea\x6f\xa9\x73\xce\x37\x57\xaf\x67\x0c\x73\x56\x49\x75\x4a\x46\x74\x57\xc0\x20\xc2\xeb\xbf\x51\x5f\x5b\xf4\x09\x97\xd2\x61\xd8\xc6\x25\xfe\x55\x78\xb0\xac\xde\xf4\x98\x32\x26\x88\xc3\xa3\x0b\x99\x92\x05\x95\x96\x53\x6f\xd0\x0e\xfe\xbd\x22\xff\xb5\x4c\x1b\x50\xb2\x71\x61\xdb\xa9\x04\xb4\xd1\xa3\xd4\x94\x1c\x43\xef\xc7\xfd\xa2\x07\x1f\xdb\x23\x3f\xe5\x86\xaa\x60\x47\xcd\x81\x01\xfa\x75\xd9\x62\x47\x9e\xb1\x3a\x2b\x8b\xd2\x8d\x9d\x6d\x81\x1a\xf9\x2f\xa9\x89\xe3\x6b\x09\xfc\xc5\x8d\x32\x96\x8a\xba\x5e\xaf\x6f\x2b\xd3\x0b\x58\x08\xc3\x49\x74\xae\x0c\xa3\xc6\x29\xcc\xdd\xff\x45\x32\x02\xf4\x54\xab\xd5\x6a\xd4\x4a\x52\x64\x2c\x36\x37\x89\x2f\x27\x69\x6f\xa6\xdd\x98\x4f\x85\xff\xb0\xb3\x37\x99\xad\x26\x99\x29\xa9\x31\x2c\xd1\x97\x82\x7c\x8b\xfb\x69\x76\x69\x34\xcc\x51\x3f\xfb\x64\x8d\x86\xbf\x8c\xbb\x89\xfc\xf3\xe3\x89\x24\x77\x8b\x3b\x9f\x65\x0e\x0b\xb4\xd6\xd8\xf7\x3e\x87\xb4\x06\xae\x58\xd3\x6c\x03\x3f\x18\x41\xf6\xf8\xf2\xf2\xf4\x92\x10\xb4\xc7\xa5\x51\xdd\x47\xa3\x16\x14\x77\x39\xf2\x5b\xf6\x87\x6c\xa4\x83\xcf\x7e\xee\x2a\x3a\x89\x76\x85\x3a\x81\x45\xaa\xbc\xa0\x4f\x14\x35\xe4\x52\xa1\xdf\x49\xba\xa0\x92\x0a\x74\xc8\x1d\x8a\x2f\xa4\xe7\x5b\x76\x65\xf9\x6e\xaa\x8a\x69\x01\xdd\x8e\xf3\xae\x4e\x96\xc5\xac\x74\xae\x0e\xfb\x2d\x13\x96\xa4\xc4\xf6\x8b\x25\x12\xf2\xed\x62\x92\x05\x52\x6c\x83\xae\xb9\xc1\xb0\x57\x53\x06\xa5\xc5\x7c\x1b\x78\x9a\x26\x89\xa2\x42\xba\x72\xbf\x5b\x70\x53\x45\x0d\xc9\xcb\x51\x17\xd1\xf8\x88\x60\x72\x60\x1a\xb1\xec\xae\xe7\x3a\x58\x9a\x38\xd8\x9d\xa6\xa4\xc4\xd9\x13\xd1\x5a\x09\xb2\x5f\xc9\x80\xdf\xe9\x8d\x8f\xa5\x25\x0a\x85\x51\x94\xfc\xdd\x10\x14\xfd\x2d\x22\xfa\x3e\x83\x8c\x7e\x3c\x66\x9a\x4b\x1a\x75\x2d\x9d\xcd\xfc\x8e\xef\x6c\xaa\x48\xfb\x9f\xf1\x5f\x00\x00\x00\xff\xff\xc9\xeb\xcd\x31\x4b\x06\x00\x00")

func templates_help_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_help_tmpl,
		"templates/help.tmpl",
	)
}

func templates_help_tmpl() (*asset, error) {
	bytes, err := templates_help_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/help.tmpl", size: 1611, mode: os.FileMode(484), modTime: time.Unix(1423620400, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/about.tmpl": templates_about_tmpl,
	"templates/dirlist.tmpl": templates_dirlist_tmpl,
	"templates/error.tmpl": templates_error_tmpl,
	"templates/footer.tmpl": templates_footer_tmpl,
	"templates/help.tmpl": templates_help_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"about.tmpl": &_bintree_t{templates_about_tmpl, map[string]*_bintree_t{
		}},
		"dirlist.tmpl": &_bintree_t{templates_dirlist_tmpl, map[string]*_bintree_t{
		}},
		"error.tmpl": &_bintree_t{templates_error_tmpl, map[string]*_bintree_t{
		}},
		"footer.tmpl": &_bintree_t{templates_footer_tmpl, map[string]*_bintree_t{
		}},
		"help.tmpl": &_bintree_t{templates_help_tmpl, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

